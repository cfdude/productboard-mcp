{
  "version": "1.0.0",
  "generated": "2025-07-21T09:18:34.207Z",
  "categories": {
    "notes": {
      "displayName": "Notes",
      "description": "notes management",
      "tools": [
        "create_note",
        "get_notes",
        "get_note",
        "update_note",
        "delete_note",
        "bulk_add_note_followers",
        "remove_note_follower",
        "list_tags",
        "create_note_tag",
        "delete_note_tag",
        "list_links",
        "create_link",
        "list_feedback_form_configurations",
        "get_feedback_form_configuration",
        "submit_feedback_form"
      ]
    },
    "followers": {
      "displayName": "Followers",
      "description": "followers management",
      "tools": []
    },
    "companies": {
      "displayName": "Companies",
      "description": "companies management",
      "tools": []
    },
    "features": {
      "displayName": "Features",
      "description": "features management",
      "tools": []
    },
    "components": {
      "displayName": "Components",
      "description": "components management",
      "tools": []
    },
    "products": {
      "displayName": "Products",
      "description": "products management",
      "tools": []
    },
    "statuses": {
      "displayName": "Feature statuses",
      "description": "statuses management",
      "tools": []
    },
    "hierarchyentitiescustomfields": {
      "displayName": "Hierarchy Entity Custom Fields",
      "description": "This API allows manipulation of *custom fields*. You can imagine a custom field as a column on Productboard Feature Board. It has a `name`, `description` and `type` (text, number, dropdown and member). The dropdown custom field also specifies a list of options. This API lets you list custom fields definitions.\n",
      "tools": []
    },
    "hierarchyentitiescustomfieldsvalues": {
      "displayName": "Hierarchy Entity Custom Fields Values",
      "description": "This API allows manipulation of *custom fields values* for features, components and products. A custom field value is a value that is assigned for a given hierarchy entity and a given custom field. If you imagine Productboard Feature Board as a table, the custom field value is the value in the cell specified by a hierarchy entity (row) and a custom field (column). The custom field value doesn't have ID on its own, you can address it by specifying the IDs of hierarchy entity and custom field it belongs to. \n\nIt is possible to register a webhook for `hierarchy-entity.custom-field-value.updated` event to get notified about custom field values changes.\n",
      "tools": []
    },
    "webhooks": {
      "displayName": "Webhooks",
      "description": "## Getting started\n\nThe following steps are necessary to be able to successfully receive the webhook notifications.\n\n- Subscribe to an event type you are interested in and define URL where your system will be listening for the notifications.\n  - Part of the subscription process is an active probe for basic verification of the destination URL.\n- Handle and confirm incoming webhook notifications.\n  - Use entity ID or URL that are present in the notification to query the latest state of that entity from Productboard.\n  - Full authentication is required to get the sensitive customer data the same as during any other API request.\n- (Optional) Delete the subscription if you are no longer interested in these notifications.\n\n\n## Tips & tricks\n\nThe first steps with webhooks may be quite tricky due to the requirement of a public IP address, valid HTTPS certificate and validating the subscription probe. You can use a free service like https://webhook.site/ for testing the incoming requests. This service also allows you to define a default response for all incoming requests which is handy to successfully pass the subscription probe. Just click the `Edit` button at the top right of the screen and enter `$request.query.validationtoken$` as the response body (lower case `t` in `validationtoken` is correct).\n\nAn alternative may be https://ngrok.com/ which offers a public URL/IP with a valid HTTPS certificate. It is able to route all incoming requests to your machine in a private network which is really handy during development.\n\n**In any case, be very careful about data security when using such publicly accessible services. Always send there only artificial data for development and testing - you never know, who will be able to access them.**\n\n\n## Firewall\n\nPlease whitelist the following static IP addresses with port 443 on your firewall to be able to receive webhook notifications from the Productboard infrastructure.\n\n- 100.25.97.81\n- 35.174.223.66\n- 52.6.23.216\n\n## Notification delivery\n\nOnce a webhook-triggering event occurs, a task is scheduled for immediate execution to deliver the corresponding notification. Once picked by the notification delivery system, the task is executed, sending a HTTP request to the target URL.\n\n### Error handling\n\nThere are things that can go wrong even before a request reaches its destination (e.g. DNS resolution error, sudden network failure, etc.) and even if it does, the target system may not always be able to correctly process the request. This is why the notification delivery system is built to handle these failures.\n\nOur implementation of the webhook notification sender follows the best practices defined by [RestHooks](https://resthooks.org/docs/retries/) and uses response status as the primary metric for determining whether a request has been successful or not.\n- `200`, `201`, `204` and other `2XX` codes: The request is considered successful and the notification is considered as delivered, no retry is needed.\n- Any other response status or error (such as connection error, timeout, etc.) is handled as an unsuccessful delivery attempt and the task is rescheduled for later.\n\nPlease note that we __do not__ follow redirects and as such any response status in the `3XX` range is understood as a failure. To avoid any potential issues, make sure to use the actual URL of your endpoint when subscribing for webhook notifications.\n\n### Retries\n\nIf a notification delivery task fails, it gets rescheduled for later. We use an exponential backoff strategy to determine how long to wait before attempting the delivery again. The table below shows the wait interval for each failed delivery attempt:\n\n| No. of failed attempts | Next wait time |\n|------------------------|----------------|\n| 1                      | 1 m            |\n| 2                      | 3 m            |\n| 3                      | 9 m            |\n| 4                      | 27 m           |\n| 5                      | 1.35 h         |\n| 6                      | 4.05 h         |\n| 7                      | 12.15 h        |\n| 8                      | 36.45 h        |\n\nIf the delivery fails more than eight times in a row, the task will be removed and the notification will be lost.\n\n## Response Structure\n\nThe response structure for webhooks follows a standard format, but for specific events, additional custom fields are included. Here, we outline the general structure and highlight examples of customized response structures for specific events.\n\n### Standard Response Structure\n\nThe standard webhook response structure includes the following fields:\n  \n  | Field      | Type   |  Description                                           | Always Included |\n  |------------|--------|--------------------------------------------------------|-----------------|\n  | id         | uuid   | The id of the resource that triggered the webhook.     | No              | \n  | eventType  | enum   | The type of event that triggered the webhook.          | Yes             |\n  | link       | object | A JSON object including a link to the relevant target. | Yes             |\n\nExample:\n```\n{\n  \"id\": \"00000000-0000-0000-0000-000000000000\",\n  \"eventType\": \"feature.created\",\n  \"link\": {\n    \"target\": \"https://api.productboard.com/features/00000000-0000-0000-0000-000000000000\",\n  }\n}\n```\n\n### Customized Response Structure\n\nFor specific events, we include additional fields in the webhook response to provide more context and relevant data. Each event with a customized response is listed below with the additional custom fields that are included in its response.\n\n#### `feature.updated` Additional Fields\n\n  | Field              | Type             | Description                                           | Always Included |\n  |--------------------|------------------|-------------------------------------------------------|-----------------|\n  | updatedAttributes  | array of strings | The field names on the resource that were updated.    | Yes             |\n\nExample:\n```\n{\n  \"id\": \"00000000-0000-0000-0000-000000000000\",\n  \"eventType\": \"feature.updated\",\n  \"link\": {\n    \"target\": \"https://api.productboard.com/features/00000000-0000-0000-0000-000000000000\",\n  },\n  \"updatedAttributes\": [\n    \"status\"\n  ]\n}\n```\n",
      "tools": ["post_webhook", "get_webhooks", "get_webhook", "delete_webhook"]
    },
    "pluginintegrations": {
      "displayName": "Plugin integrations",
      "description": "Plugin integrations allow you to add a column to the Productboard Features board which allow for integrations with third-party system. A typical use case is the pushing of features to a ticketing system like Jira. This API is to be used for systems or use cases which are not natively supported by Productboard. A typical flow is as follows:\n1. A POST request is sent to `/plugin-integrations` which will create a new integration/task column in Productboard.  When making the request, you should specify `data.action.url` as the endpoint that will be called when a user clicks on the \"Push button\" on the new integration column. This endpoint must be a service that is publically accessible that can handle HTTP requests. \n2. When the \"Push button\" is clicked, a POST request is sent to the endpoint specified in the previous step. Productboard data is sent to your service which then sends it to the third-party system you would like to integrate with. Generally, the third-party system will respond with data that your service can then return to Productboard.\n3. Your service can take data from the third-party system and make a PUT request to `/plugin-integrations/{id}/connections/{featureId}` to update the status, link, and color of the Push button. This state is called Connection.\n4. The third-party system can change the Connection later using the Plugin Integration Connections API.\n5. In the future we plan to support an unlinking flow from the Productboard UI. The unlinking flow will be similar to linking i.e. when the user clicks on the Unlink button, the third-party system will be notified through the endpoint specified in the Plugin integration.\n\n### Sample workflow of a plugin integration between Productboard and GitLab:\n![sample integration flow](img/sample-integration-flow.png)\n",
      "tools": []
    },
    "pluginintegrationconnections": {
      "displayName": "Plugin integration connections",
      "description": "Once a Plugin integration is set up, it can be used to interact with the configured 3rd party system. This interaction has a form of clicking a \"push button\" on a Features board. This, in general, notifies the 3rd party system about a user's intention to send feature data from Productboard to that system for processing. The most common use case for this is to bind Productboard feature to some other entity in another system (e.g. a GitLab issue). A result of this operation is what we call _Plugin integration connection_ and it represents a single link between Productboard feature and some other entity.\n\nThere are two ways of creating such a connection:\n  1. via Productboard UI by clicking a push button\n  2. via this API\n\nThe only difference between these two options is in who initiates the operation. The UI gives a Productboard user the ability to create a connection while on the other hand, the API gives the 3rd party system a way of creating a connection on its own.\n\nNote that while we call this thing a \"connection\", it _does not_ mean that every push action necessarily has to bind a feture to some other entity. A \"connection\" can represent whatever you see fit, as long as it makes sense in both Productboard and the other system.\n",
      "tools": []
    },
    "jiraintegrations": {
      "displayName": "Jira integrations",
      "description": "Jira integrations endpoint allows you to list all configured Jira integrations. Its main purpose is to allow the client to find Jira integration ID and then retrieve connections between Productboard features and Jira issues.\n",
      "tools": []
    },
    "jiraintegrationconnections": {
      "displayName": "Jira integration connections",
      "description": "A Jira integration connection represents a link between a Productboard feature and a Jira issue. Using this endpoint you can retrieve which Productboard features are linked with Jira.\n",
      "tools": []
    },
    "users": {
      "displayName": "Users",
      "description": "Users are individuals associated with notes on Productboard. Users have five properties. These include names, emails, company, and external IDs. Each of these properties can be configured through the API.\nExternal IDs can be used as a unique identifier for users. This external ID should be the unique identifier you use to track these users across all systems.\nUsers are currently created through the notes API. The user API currently only supports updating users.\n",
      "tools": []
    },
    "releases": {
      "displayName": "Releases",
      "description": "Release indicates when some feature will be available. You can define releases around sequential numbers (e.g. R17, R18, R19), broader time horizons (e.g. January release, February release, March release), or relative timeframes (e.g. Now, Next, Later).\n\nIt is possible to register a webhook for `release.created`, `release.updated` and `release.deleted` events to get notified about changes.\n",
      "tools": []
    },
    "releasegroups": {
      "displayName": "Release groups",
      "description": "If you have multiple teams working out of the same productboard workspace, each using a different release schedule, you can manage each as a separate release group.\n\nYou can manage release groups only if you are on Scale or Enterprise plan and you have *Multiple release groups* enabled. If you're on Pro plan you can only read release groups.\n",
      "tools": []
    },
    "featurereleaseassignments": {
      "displayName": "Feature release assignments",
      "description": "This API allows manipulation of *feature release assignments*. A feature release assignment describes if a given feature is assigned to a given release. If you imagine Productboard Feature Board as a table, the feature release assignment is an intersection specified by a feature (row) and a release (column). A feature release assignment doesn't have ID on its own, you can address it by specifying the IDs of feature and release it belongs to.\n\nIt is possible to register a webhook for `feature-release-assignment.updated` events to get notified about changes.\n",
      "tools": []
    },
    "objectives": {
      "displayName": "Objectives",
      "description": "This API allows manipulation of *objectives*.\n",
      "tools": [
        "get_objectives",
        "create_objective",
        "get_objective",
        "update_objective",
        "delete_objective",
        "list_links_objective_to_features",
        "list_links_objective_to_initiatives",
        "create_objective_to_initiative_link",
        "delete_objective_to_initiative_link",
        "create_objective_to_feature_link",
        "delete_objective_to_feature_link"
      ]
    },
    "keyresults": {
      "displayName": "Key Results",
      "description": "This API allows manipulation of *key results*.\n",
      "tools": []
    },
    "initiatives": {
      "displayName": "Initiatives",
      "description": "This API allows manipulation of *initiatives*.\n",
      "tools": [
        "get_initiatives",
        "create_initiative",
        "get_initiative",
        "update_initiative",
        "delete_initiative",
        "list_links_initiative_to_objectives",
        "list_links_initiative_to_features",
        "create_initiative_to_objective_link",
        "delete_initiative_to_objective_link",
        "create_initiative_to_feature_link",
        "delete_initiative_to_feature_link"
      ]
    },
    "companies & users": {
      "displayName": "Companies & users",
      "description": "companies & users operations",
      "tools": [
        "create_company",
        "get_companies",
        "get_company",
        "update_company",
        "delete_company",
        "create_company_field",
        "list_company_fields",
        "get_company_field",
        "update_company_field",
        "delete_company_field",
        "get_company_field_value",
        "set_company_field_value",
        "delete_company_field_value",
        "get_users",
        "create_user",
        "get_user",
        "update_user",
        "delete_user"
      ]
    },
    "product hierarchy": {
      "displayName": "Product hierarchy",
      "description": "product hierarchy operations",
      "tools": [
        "create_feature",
        "get_features",
        "get_feature",
        "update_feature",
        "update_feature_deprecated",
        "delete_feature",
        "list_links_to_initiatives",
        "create_initiative_link",
        "delete_initiative_link",
        "list_links_to_objectives",
        "create_objective_link",
        "delete_objective_link",
        "create_component",
        "get_components",
        "get_component",
        "update_component",
        "update_component_deprecated",
        "get_products",
        "get_product",
        "update_product",
        "update_product_deprecated",
        "get_feature_statuses"
      ]
    },
    "custom fields": {
      "displayName": "Custom fields",
      "description": "custom fields operations",
      "tools": [
        "get_custom_fields",
        "get_custom_fields_values",
        "get_custom_field",
        "get_custom_field_value",
        "set_custom_field_value",
        "delete_custom_field_value"
      ]
    },
    "releases & release groups": {
      "displayName": "Releases & release groups",
      "description": "releases & release groups operations",
      "tools": [
        "create_release_group",
        "list_release_groups",
        "get_release_group",
        "update_release_group",
        "delete_release_group",
        "create_release",
        "list_releases",
        "get_release",
        "update_release",
        "delete_release",
        "list_feature_release_assignments",
        "get_feature_release_assignment",
        "update_feature_release_assignment"
      ]
    },
    "key results": {
      "displayName": "Key results",
      "description": "key results operations",
      "tools": [
        "get_key_results",
        "create_key_result",
        "get_key_result",
        "update_key_result",
        "delete_key_result"
      ]
    },
    "plugin integrations": {
      "displayName": "Plugin integrations",
      "description": "plugin integrations operations",
      "tools": [
        "post_plugin_integration",
        "get_plugin_integrations",
        "get_plugin_integration",
        "patch_plugin_integration",
        "put_plugin_integration",
        "delete_plugin_integration",
        "get_plugin_integration_connections",
        "get_plugin_integration_connection",
        "put_plugin_integration_connection",
        "delete_plugin_integration_connection"
      ]
    },
    "jira integrations": {
      "displayName": "Jira integrations",
      "description": "jira integrations operations",
      "tools": [
        "get_jira_integration",
        "get_jira_integrations",
        "get_jira_integration_connection",
        "get_jira_integration_connections"
      ]
    }
  },
  "tools": {
    "create_note": {
      "category": "notes",
      "operation": "POST /notes",
      "description": "Create a note",
      "requiredParams": [],
      "optionalParams": [
        "Productboard-Partner-Id",
        "instance",
        "workspaceId",
        "includeRaw"
      ],
      "implementation": "tools/notes.js#create_note"
    },
    "get_notes": {
      "category": "notes",
      "operation": "GET /notes",
      "description": "List all notes",
      "requiredParams": [],
      "optionalParams": [
        "last",
        "dateFrom",
        "createdFrom",
        "dateTo",
        "createdTo",
        "updatedFrom",
        "updatedTo",
        "term",
        "featureId",
        "companyId",
        "ownerEmail",
        "source",
        "anyTag",
        "allTags",
        "pageLimit",
        "pageCursor",
        "instance",
        "workspaceId",
        "includeRaw"
      ],
      "implementation": "tools/notes.js#getNotes"
    },
    "get_note": {
      "category": "notes",
      "operation": "GET /notes/{id}",
      "description": "Retrieve a note",
      "requiredParams": ["id"],
      "optionalParams": ["instance", "workspaceId", "includeRaw"],
      "implementation": "tools/notes.js#getNote"
    },
    "update_note": {
      "category": "notes",
      "operation": "PATCH /notes/{id}",
      "description": "Update a note",
      "requiredParams": ["id"],
      "optionalParams": ["instance", "workspaceId", "includeRaw"],
      "implementation": "tools/notes.js#updateNote"
    },
    "delete_note": {
      "category": "notes",
      "operation": "DELETE /notes/{id}",
      "description": "Delete a note",
      "requiredParams": ["id"],
      "optionalParams": ["instance", "workspaceId", "includeRaw"],
      "implementation": "tools/notes.js#deleteNote"
    },
    "bulk_add_note_followers": {
      "category": "notes",
      "operation": "POST /notes/{noteId}/user-followers",
      "description": "Add followers to a note",
      "requiredParams": ["noteId"],
      "optionalParams": ["body", "instance", "workspaceId", "includeRaw"],
      "implementation": "tools/notes.js#bulkAddNoteFollowers"
    },
    "remove_note_follower": {
      "category": "notes",
      "operation": "DELETE /notes/{noteId}/user-followers/{email}",
      "description": "Remove a follower from a note",
      "requiredParams": ["noteId", "email"],
      "optionalParams": ["instance", "workspaceId", "includeRaw"],
      "implementation": "tools/notes.js#removeNoteFollower"
    },
    "list_tags": {
      "category": "notes",
      "operation": "GET /notes/{noteId}/tags",
      "description": "List tags",
      "requiredParams": ["noteId"],
      "optionalParams": ["instance", "workspaceId", "includeRaw"],
      "implementation": "tools/notes.js#listTags"
    },
    "create_note_tag": {
      "category": "notes",
      "operation": "POST /notes/{noteId}/tags/{tagName}",
      "description": "Create a tag",
      "requiredParams": ["noteId", "tagName"],
      "optionalParams": ["instance", "workspaceId", "includeRaw"],
      "implementation": "tools/notes.js#createNoteTag"
    },
    "delete_note_tag": {
      "category": "notes",
      "operation": "DELETE /notes/{noteId}/tags/{tagName}",
      "description": "Remove a tag from a note",
      "requiredParams": ["noteId", "tagName"],
      "optionalParams": ["instance", "workspaceId", "includeRaw"],
      "implementation": "tools/notes.js#deleteNoteTag"
    },
    "list_links": {
      "category": "notes",
      "operation": "GET /notes/{noteId}/links",
      "description": "List links",
      "requiredParams": ["noteId"],
      "optionalParams": ["instance", "workspaceId", "includeRaw"],
      "implementation": "tools/notes.js#listLinks"
    },
    "create_link": {
      "category": "notes",
      "operation": "POST /notes/{noteId}/links/{entityId}",
      "description": "Create a link",
      "requiredParams": ["noteId", "entityId"],
      "optionalParams": ["instance", "workspaceId", "includeRaw"],
      "implementation": "tools/notes.js#createLink"
    },
    "list_feedback_form_configurations": {
      "category": "notes",
      "operation": "GET /feedback-form-configurations",
      "description": "List all feedback form configurations",
      "requiredParams": [],
      "optionalParams": ["instance", "workspaceId", "includeRaw"],
      "implementation": "tools/notes.js#listFeedbackFormConfigurations"
    },
    "get_feedback_form_configuration": {
      "category": "notes",
      "operation": "GET /feedback-form-configurations/{id}",
      "description": "Retrieve a feedback form configuration",
      "requiredParams": ["id"],
      "optionalParams": ["instance", "workspaceId", "includeRaw"],
      "implementation": "tools/notes.js#getFeedbackFormConfiguration"
    },
    "submit_feedback_form": {
      "category": "notes",
      "operation": "POST /feedback-forms",
      "description": "Submit a feedback form",
      "requiredParams": [],
      "optionalParams": ["body", "instance", "workspaceId", "includeRaw"],
      "implementation": "tools/notes.js#submitFeedbackForm"
    },
    "create_company": {
      "category": "companies & users",
      "operation": "POST /companies",
      "description": "Create a company",
      "requiredParams": [],
      "optionalParams": [
        "Productboard-Partner-Id",
        "instance",
        "workspaceId",
        "includeRaw"
      ],
      "implementation": "tools/companies & users.js#createCompany"
    },
    "get_companies": {
      "category": "companies & users",
      "operation": "GET /companies",
      "description": "List all companies",
      "requiredParams": [],
      "optionalParams": [
        "pageLimit",
        "pageOffset",
        "term",
        "hasNotes",
        "featureId",
        "instance",
        "workspaceId",
        "includeRaw"
      ],
      "implementation": "tools/companies & users.js#getCompanies"
    },
    "get_company": {
      "category": "companies & users",
      "operation": "GET /companies/{id}",
      "description": "Retrieve company",
      "requiredParams": ["id"],
      "optionalParams": ["instance", "workspaceId", "includeRaw"],
      "implementation": "tools/companies & users.js#getCompany"
    },
    "update_company": {
      "category": "companies & users",
      "operation": "PATCH /companies/{id}",
      "description": "Update a company",
      "requiredParams": ["id"],
      "optionalParams": ["instance", "workspaceId", "includeRaw"],
      "implementation": "tools/companies & users.js#updateCompany"
    },
    "delete_company": {
      "category": "companies & users",
      "operation": "DELETE /companies/{id}",
      "description": "Delete a company",
      "requiredParams": ["id"],
      "optionalParams": ["instance", "workspaceId", "includeRaw"],
      "implementation": "tools/companies & users.js#deleteCompany"
    },
    "create_company_field": {
      "category": "companies & users",
      "operation": "POST /companies/custom-fields",
      "description": "Create a company field",
      "requiredParams": ["body"],
      "optionalParams": ["instance", "workspaceId", "includeRaw"],
      "implementation": "tools/companies & users.js#createCompanyField"
    },
    "list_company_fields": {
      "category": "companies & users",
      "operation": "GET /companies/custom-fields",
      "description": "Retrieve company fields",
      "requiredParams": [],
      "optionalParams": ["instance", "workspaceId", "includeRaw"],
      "implementation": "tools/companies & users.js#listCompanyFields"
    },
    "get_company_field": {
      "category": "companies & users",
      "operation": "GET /companies/custom-fields/{id}",
      "description": "Retrieve a company field",
      "requiredParams": ["id"],
      "optionalParams": ["instance", "workspaceId", "includeRaw"],
      "implementation": "tools/companies & users.js#getCompanyField"
    },
    "update_company_field": {
      "category": "companies & users",
      "operation": "PATCH /companies/custom-fields/{id}",
      "description": "Update a company field",
      "requiredParams": ["id", "body"],
      "optionalParams": ["instance", "workspaceId", "includeRaw"],
      "implementation": "tools/companies & users.js#updateCompanyField"
    },
    "delete_company_field": {
      "category": "companies & users",
      "operation": "DELETE /companies/custom-fields/{id}",
      "description": "Delete a company field",
      "requiredParams": ["id"],
      "optionalParams": ["instance", "workspaceId", "includeRaw"],
      "implementation": "tools/companies & users.js#deleteCompanyField"
    },
    "get_company_field_value": {
      "category": "companies & users",
      "operation": "GET /companies/{companyId}/custom-fields/{companyCustomFieldId}/value",
      "description": "Retrieve company field value",
      "requiredParams": ["companyId", "companyCustomFieldId"],
      "optionalParams": ["instance", "workspaceId", "includeRaw"],
      "implementation": "tools/companies & users.js#getCompanyFieldValue"
    },
    "set_company_field_value": {
      "category": "companies & users",
      "operation": "PUT /companies/{companyId}/custom-fields/{companyCustomFieldId}/value",
      "description": "Sets company field value",
      "requiredParams": ["companyId", "companyCustomFieldId", "name"],
      "optionalParams": [
        "domain",
        "externalId",
        "instance",
        "workspaceId",
        "includeRaw"
      ],
      "implementation": "tools/companies & users.js#setCompanyFieldValue"
    },
    "delete_company_field_value": {
      "category": "companies & users",
      "operation": "DELETE /companies/{companyId}/custom-fields/{companyCustomFieldId}/value",
      "description": "Delete company field value",
      "requiredParams": ["companyId", "companyCustomFieldId"],
      "optionalParams": ["instance", "workspaceId", "includeRaw"],
      "implementation": "tools/companies & users.js#deleteCompanyFieldValue"
    },
    "get_users": {
      "category": "companies & users",
      "operation": "GET /users",
      "description": "List all users",
      "requiredParams": [],
      "optionalParams": ["instance", "workspaceId", "includeRaw"],
      "implementation": "tools/companies & users.js#getUsers"
    },
    "create_user": {
      "category": "companies & users",
      "operation": "POST /users",
      "description": "Create a user",
      "requiredParams": [],
      "optionalParams": ["instance", "workspaceId", "includeRaw"],
      "implementation": "tools/companies & users.js#createUser"
    },
    "get_user": {
      "category": "companies & users",
      "operation": "GET /users/{id}",
      "description": "Retrieve a user",
      "requiredParams": ["id"],
      "optionalParams": ["instance", "workspaceId", "includeRaw"],
      "implementation": "tools/companies & users.js#getUser"
    },
    "update_user": {
      "category": "companies & users",
      "operation": "PATCH /users/{id}",
      "description": "Update a user",
      "requiredParams": ["id"],
      "optionalParams": ["instance", "workspaceId", "includeRaw"],
      "implementation": "tools/companies & users.js#updateUser"
    },
    "delete_user": {
      "category": "companies & users",
      "operation": "DELETE /users/{id}",
      "description": "Delete a user",
      "requiredParams": ["id"],
      "optionalParams": ["instance", "workspaceId", "includeRaw"],
      "implementation": "tools/companies & users.js#deleteUser"
    },
    "create_feature": {
      "category": "product hierarchy",
      "operation": "POST /features",
      "description": "Create a feature",
      "requiredParams": [],
      "optionalParams": ["instance", "workspaceId", "includeRaw"],
      "implementation": "tools/product hierarchy.js#createFeature"
    },
    "get_features": {
      "category": "product hierarchy",
      "operation": "GET /features",
      "description": "List all features",
      "requiredParams": [],
      "optionalParams": [
        "status.id",
        "status.name",
        "parent.id",
        "archived",
        "owner.email",
        "note.id",
        "instance",
        "workspaceId",
        "includeRaw"
      ],
      "implementation": "tools/product hierarchy.js#getFeatures"
    },
    "get_feature": {
      "category": "product hierarchy",
      "operation": "GET /features/{id}",
      "description": "Retrieve a feature",
      "requiredParams": ["id"],
      "optionalParams": ["instance", "workspaceId", "includeRaw"],
      "implementation": "tools/product hierarchy.js#getFeature"
    },
    "update_feature": {
      "category": "product hierarchy",
      "operation": "PATCH /features/{id}",
      "description": "Update a feature",
      "requiredParams": ["id"],
      "optionalParams": ["instance", "workspaceId", "includeRaw"],
      "implementation": "tools/product hierarchy.js#updateFeature"
    },
    "update_feature_deprecated": {
      "category": "product hierarchy",
      "operation": "PUT /features/{id}",
      "description": "Update a feature",
      "requiredParams": ["id", "body"],
      "optionalParams": ["instance", "workspaceId", "includeRaw"],
      "implementation": "tools/product hierarchy.js#updateFeatureDeprecated"
    },
    "delete_feature": {
      "category": "product hierarchy",
      "operation": "DELETE /features/{id}",
      "description": "Delete a feature",
      "requiredParams": ["id"],
      "optionalParams": ["instance", "workspaceId", "includeRaw"],
      "implementation": "tools/product hierarchy.js#deleteFeature"
    },
    "list_links_to_initiatives": {
      "category": "product hierarchy",
      "operation": "GET /features/{id}/links/initiatives",
      "description": "List initiatives linked to a specific feature",
      "requiredParams": ["id"],
      "optionalParams": ["instance", "workspaceId", "includeRaw"],
      "implementation": "tools/product hierarchy.js#listLinksToInitiatives"
    },
    "create_initiative_link": {
      "category": "product hierarchy",
      "operation": "POST /features/{id}/links/initiatives/{initiativeId}",
      "description": "Create a new link between a feature and an initiative",
      "requiredParams": ["id", "initiativeId"],
      "optionalParams": ["instance", "workspaceId", "includeRaw"],
      "implementation": "tools/product hierarchy.js#createInitiativeLink"
    },
    "delete_initiative_link": {
      "category": "product hierarchy",
      "operation": "DELETE /features/{id}/links/initiatives/{initiativeId}",
      "description": "Delete a link between a feature and an initiative",
      "requiredParams": ["id", "initiativeId"],
      "optionalParams": ["instance", "workspaceId", "includeRaw"],
      "implementation": "tools/product hierarchy.js#deleteInitiativeLink"
    },
    "list_links_to_objectives": {
      "category": "product hierarchy",
      "operation": "GET /features/{id}/links/objectives",
      "description": "List objectives linked to a specific feature",
      "requiredParams": ["id"],
      "optionalParams": ["instance", "workspaceId", "includeRaw"],
      "implementation": "tools/product hierarchy.js#listLinksToObjectives"
    },
    "create_objective_link": {
      "category": "product hierarchy",
      "operation": "POST /features/{id}/links/objectives/{objectiveId}",
      "description": "Create a new link between a feature and an objective",
      "requiredParams": ["id", "objectiveId"],
      "optionalParams": ["instance", "workspaceId", "includeRaw"],
      "implementation": "tools/product hierarchy.js#createObjectiveLink"
    },
    "delete_objective_link": {
      "category": "product hierarchy",
      "operation": "DELETE /features/{id}/links/objectives/{objectiveId}",
      "description": "Delete a link between a feature and an objective",
      "requiredParams": ["id", "objectiveId"],
      "optionalParams": ["instance", "workspaceId", "includeRaw"],
      "implementation": "tools/product hierarchy.js#deleteObjectiveLink"
    },
    "create_component": {
      "category": "product hierarchy",
      "operation": "POST /components",
      "description": "Create a component",
      "requiredParams": [],
      "optionalParams": ["instance", "workspaceId", "includeRaw"],
      "implementation": "tools/product hierarchy.js#createComponent"
    },
    "get_components": {
      "category": "product hierarchy",
      "operation": "GET /components",
      "description": "List all components",
      "requiredParams": [],
      "optionalParams": ["instance", "workspaceId", "includeRaw"],
      "implementation": "tools/product hierarchy.js#getComponents"
    },
    "get_component": {
      "category": "product hierarchy",
      "operation": "GET /components/{id}",
      "description": "Retrieve a component",
      "requiredParams": ["id"],
      "optionalParams": ["instance", "workspaceId", "includeRaw"],
      "implementation": "tools/product hierarchy.js#getComponent"
    },
    "update_component": {
      "category": "product hierarchy",
      "operation": "PATCH /components/{id}",
      "description": "Update a component",
      "requiredParams": ["id"],
      "optionalParams": ["instance", "workspaceId", "includeRaw"],
      "implementation": "tools/product hierarchy.js#updateComponent"
    },
    "update_component_deprecated": {
      "category": "product hierarchy",
      "operation": "PUT /components/{id}",
      "description": "Update a component",
      "requiredParams": ["id", "body"],
      "optionalParams": ["instance", "workspaceId", "includeRaw"],
      "implementation": "tools/product hierarchy.js#updateComponentDeprecated"
    },
    "get_products": {
      "category": "product hierarchy",
      "operation": "GET /products",
      "description": "List all products",
      "requiredParams": [],
      "optionalParams": ["instance", "workspaceId", "includeRaw"],
      "implementation": "tools/product hierarchy.js#getProducts"
    },
    "get_product": {
      "category": "product hierarchy",
      "operation": "GET /products/{id}",
      "description": "Retrieve a product",
      "requiredParams": ["id"],
      "optionalParams": ["instance", "workspaceId", "includeRaw"],
      "implementation": "tools/product hierarchy.js#getProduct"
    },
    "update_product": {
      "category": "product hierarchy",
      "operation": "PATCH /products/{id}",
      "description": "Update a product",
      "requiredParams": ["id"],
      "optionalParams": ["instance", "workspaceId", "includeRaw"],
      "implementation": "tools/product hierarchy.js#updateProduct"
    },
    "update_product_deprecated": {
      "category": "product hierarchy",
      "operation": "PUT /products/{id}",
      "description": "Update a product",
      "requiredParams": ["id", "body"],
      "optionalParams": ["instance", "workspaceId", "includeRaw"],
      "implementation": "tools/product hierarchy.js#updateProductDeprecated"
    },
    "get_feature_statuses": {
      "category": "product hierarchy",
      "operation": "GET /feature-statuses",
      "description": "List all feature statuses",
      "requiredParams": [],
      "optionalParams": ["instance", "workspaceId", "includeRaw"],
      "implementation": "tools/product hierarchy.js#getFeatureStatuses"
    },
    "get_custom_fields": {
      "category": "custom fields",
      "operation": "GET /hierarchy-entities/custom-fields",
      "description": "List all custom fields",
      "requiredParams": ["type"],
      "optionalParams": ["instance", "workspaceId", "includeRaw"],
      "implementation": "tools/custom fields.js#getCustomFields"
    },
    "get_custom_fields_values": {
      "category": "custom fields",
      "operation": "GET /hierarchy-entities/custom-fields-values",
      "description": "List all custom fields' values",
      "requiredParams": [],
      "optionalParams": [
        "type",
        "customField.id",
        "hierarchyEntity.id",
        "instance",
        "workspaceId",
        "includeRaw"
      ],
      "implementation": "tools/custom fields.js#getCustomFieldsValues"
    },
    "get_custom_field": {
      "category": "custom fields",
      "operation": "GET /hierarchy-entities/custom-fields/{id}",
      "description": "Retrieve a custom field",
      "requiredParams": ["id"],
      "optionalParams": ["instance", "workspaceId", "includeRaw"],
      "implementation": "tools/custom fields.js#getCustomField"
    },
    "get_custom_field_value": {
      "category": "custom fields",
      "operation": "GET /hierarchy-entities/custom-fields-values/value",
      "description": "Retrieve a custom field's value",
      "requiredParams": ["customField.id", "hierarchyEntity.id"],
      "optionalParams": ["instance", "workspaceId", "includeRaw"],
      "implementation": "tools/custom fields.js#getCustomFieldValue"
    },
    "set_custom_field_value": {
      "category": "custom fields",
      "operation": "PUT /hierarchy-entities/custom-fields-values/value",
      "description": "Set value of a custom field for a given hierarchy entity",
      "requiredParams": ["customField.id", "hierarchyEntity.id"],
      "optionalParams": ["instance", "workspaceId", "includeRaw"],
      "implementation": "tools/custom fields.js#setCustomFieldValue"
    },
    "delete_custom_field_value": {
      "category": "custom fields",
      "operation": "DELETE /hierarchy-entities/custom-fields-values/value",
      "description": "Delete value of a custom field for a given hierarchy entity",
      "requiredParams": ["customField.id", "hierarchyEntity.id"],
      "optionalParams": ["instance", "workspaceId", "includeRaw"],
      "implementation": "tools/custom fields.js#deleteCustomFieldValue"
    },
    "create_release_group": {
      "category": "releases & release groups",
      "operation": "POST /release-groups",
      "description": "Create a release group",
      "requiredParams": [],
      "optionalParams": ["instance", "workspaceId", "includeRaw"],
      "implementation": "tools/releases & release groups.js#createReleaseGroup"
    },
    "list_release_groups": {
      "category": "releases & release groups",
      "operation": "GET /release-groups",
      "description": "List all release groups",
      "requiredParams": [],
      "optionalParams": ["instance", "workspaceId", "includeRaw"],
      "implementation": "tools/releases & release groups.js#listReleaseGroups"
    },
    "get_release_group": {
      "category": "releases & release groups",
      "operation": "GET /release-groups/{id}",
      "description": "Retrieve a release group",
      "requiredParams": ["id"],
      "optionalParams": ["instance", "workspaceId", "includeRaw"],
      "implementation": "tools/releases & release groups.js#getReleaseGroup"
    },
    "update_release_group": {
      "category": "releases & release groups",
      "operation": "PATCH /release-groups/{id}",
      "description": "Update a release group",
      "requiredParams": ["id"],
      "optionalParams": ["instance", "workspaceId", "includeRaw"],
      "implementation": "tools/releases & release groups.js#updateReleaseGroup"
    },
    "delete_release_group": {
      "category": "releases & release groups",
      "operation": "DELETE /release-groups/{id}",
      "description": "Delete a release group",
      "requiredParams": ["id"],
      "optionalParams": ["instance", "workspaceId", "includeRaw"],
      "implementation": "tools/releases & release groups.js#deleteReleaseGroup"
    },
    "create_release": {
      "category": "releases & release groups",
      "operation": "POST /releases",
      "description": "Create a release",
      "requiredParams": [],
      "optionalParams": ["instance", "workspaceId", "includeRaw"],
      "implementation": "tools/releases & release groups.js#createRelease"
    },
    "list_releases": {
      "category": "releases & release groups",
      "operation": "GET /releases",
      "description": "List all releases",
      "requiredParams": [],
      "optionalParams": [
        "releaseGroup.id",
        "instance",
        "workspaceId",
        "includeRaw"
      ],
      "implementation": "tools/releases & release groups.js#listReleases"
    },
    "get_release": {
      "category": "releases & release groups",
      "operation": "GET /releases/{id}",
      "description": "Retrieve a release",
      "requiredParams": ["id"],
      "optionalParams": ["instance", "workspaceId", "includeRaw"],
      "implementation": "tools/releases & release groups.js#getRelease"
    },
    "update_release": {
      "category": "releases & release groups",
      "operation": "PATCH /releases/{id}",
      "description": "Update a release",
      "requiredParams": ["id"],
      "optionalParams": ["instance", "workspaceId", "includeRaw"],
      "implementation": "tools/releases & release groups.js#updateRelease"
    },
    "delete_release": {
      "category": "releases & release groups",
      "operation": "DELETE /releases/{id}",
      "description": "Delete a release",
      "requiredParams": ["id"],
      "optionalParams": ["instance", "workspaceId", "includeRaw"],
      "implementation": "tools/releases & release groups.js#deleteRelease"
    },
    "list_feature_release_assignments": {
      "category": "releases & release groups",
      "operation": "GET /feature-release-assignments",
      "description": "List all feature release assignments",
      "requiredParams": [],
      "optionalParams": [
        "feature.id",
        "release.id",
        "release.state",
        "release.timeframe.endDate.from",
        "release.timeframe.endDate.to",
        "instance",
        "workspaceId",
        "includeRaw"
      ],
      "implementation": "tools/releases & release groups.js#listFeatureReleaseAssignments"
    },
    "get_feature_release_assignment": {
      "category": "releases & release groups",
      "operation": "GET /feature-release-assignments/assignment",
      "description": "Retrieve a feature release assignment",
      "requiredParams": ["release.id", "feature.id"],
      "optionalParams": ["instance", "workspaceId", "includeRaw"],
      "implementation": "tools/releases & release groups.js#getFeatureReleaseAssignment"
    },
    "update_feature_release_assignment": {
      "category": "releases & release groups",
      "operation": "PUT /feature-release-assignments/assignment",
      "description": "Update a feature release assignment",
      "requiredParams": ["release.id", "feature.id", "body"],
      "optionalParams": ["instance", "workspaceId", "includeRaw"],
      "implementation": "tools/releases & release groups.js#updateFeatureReleaseAssignment"
    },
    "get_objectives": {
      "category": "objectives",
      "operation": "GET /objectives",
      "description": "List all objectives",
      "requiredParams": [],
      "optionalParams": ["instance", "workspaceId", "includeRaw"],
      "implementation": "tools/objectives.js#getObjectives"
    },
    "create_objective": {
      "category": "objectives",
      "operation": "POST /objectives",
      "description": "Create a new objective",
      "requiredParams": ["name"],
      "optionalParams": [
        "description",
        "ownerEmail",
        "timeframe",
        "instance",
        "workspaceId",
        "includeRaw"
      ],
      "implementation": "tools/objectives.js#createObjective"
    },
    "get_objective": {
      "category": "objectives",
      "operation": "GET /objectives/{id}",
      "description": "Get a specific objective",
      "requiredParams": ["id"],
      "optionalParams": ["instance", "workspaceId", "includeRaw"],
      "implementation": "tools/objectives.js#getObjective"
    },
    "update_objective": {
      "category": "objectives",
      "operation": "PATCH /objectives/{id}",
      "description": "Update an existing objective",
      "requiredParams": ["id", "name"],
      "optionalParams": [
        "description",
        "ownerEmail",
        "timeframe",
        "instance",
        "workspaceId",
        "includeRaw"
      ],
      "implementation": "tools/objectives.js#updateObjective"
    },
    "delete_objective": {
      "category": "objectives",
      "operation": "DELETE /objectives/{id}",
      "description": "Delete an objective",
      "requiredParams": ["id"],
      "optionalParams": ["instance", "workspaceId", "includeRaw"],
      "implementation": "tools/objectives.js#deleteObjective"
    },
    "list_links_objective_to_features": {
      "category": "objectives",
      "operation": "GET /objectives/{id}/links/features",
      "description": "List features linked to a specific objective",
      "requiredParams": ["id"],
      "optionalParams": ["instance", "workspaceId", "includeRaw"],
      "implementation": "tools/objectives.js#listLinksObjectiveToFeatures"
    },
    "list_links_objective_to_initiatives": {
      "category": "objectives",
      "operation": "GET /objectives/{id}/links/initiatives",
      "description": "List initiatives linked to a specific objective",
      "requiredParams": ["id"],
      "optionalParams": ["instance", "workspaceId", "includeRaw"],
      "implementation": "tools/objectives.js#listLinksObjectiveToInitiatives"
    },
    "create_objective_to_initiative_link": {
      "category": "objectives",
      "operation": "POST /objectives/{id}/links/initiatives/{initiativeId}",
      "description": "Create a new link between an objective and an initiative",
      "requiredParams": ["id", "initiativeId"],
      "optionalParams": ["instance", "workspaceId", "includeRaw"],
      "implementation": "tools/objectives.js#createObjectiveToInitiativeLink"
    },
    "delete_objective_to_initiative_link": {
      "category": "objectives",
      "operation": "DELETE /objectives/{id}/links/initiatives/{initiativeId}",
      "description": "Delete a link between an objective and an initiative",
      "requiredParams": ["id", "initiativeId"],
      "optionalParams": ["instance", "workspaceId", "includeRaw"],
      "implementation": "tools/objectives.js#deleteObjectiveToInitiativeLink"
    },
    "create_objective_to_feature_link": {
      "category": "objectives",
      "operation": "POST /objectives/{id}/links/features/{featureId}",
      "description": "Create a new link between an objective and a feature",
      "requiredParams": ["id", "featureId"],
      "optionalParams": ["instance", "workspaceId", "includeRaw"],
      "implementation": "tools/objectives.js#createObjectiveToFeatureLink"
    },
    "delete_objective_to_feature_link": {
      "category": "objectives",
      "operation": "DELETE /objectives/{id}/links/features/{featureId}",
      "description": "Delete a link between an objective and a feature",
      "requiredParams": ["id", "featureId"],
      "optionalParams": ["instance", "workspaceId", "includeRaw"],
      "implementation": "tools/objectives.js#deleteObjectiveToFeatureLink"
    },
    "get_key_results": {
      "category": "key results",
      "operation": "GET /key-results",
      "description": "List all key results",
      "requiredParams": [],
      "optionalParams": ["instance", "workspaceId", "includeRaw"],
      "implementation": "tools/key results.js#getKeyResults"
    },
    "create_key_result": {
      "category": "key results",
      "operation": "POST /key-results",
      "description": "Create a key result",
      "requiredParams": ["name", "objectiveId"],
      "optionalParams": [
        "description",
        "ownerEmail",
        "current",
        "target",
        "instance",
        "workspaceId",
        "includeRaw"
      ],
      "implementation": "tools/key results.js#createKeyResult"
    },
    "get_key_result": {
      "category": "key results",
      "operation": "GET /key-results/{id}",
      "description": "Retrieve a key result",
      "requiredParams": ["id"],
      "optionalParams": ["instance", "workspaceId", "includeRaw"],
      "implementation": "tools/key results.js#getKeyResult"
    },
    "update_key_result": {
      "category": "key results",
      "operation": "PATCH /key-results/{id}",
      "description": "Update a key result",
      "requiredParams": ["id", "name", "objectiveId"],
      "optionalParams": [
        "description",
        "ownerEmail",
        "current",
        "target",
        "instance",
        "workspaceId",
        "includeRaw"
      ],
      "implementation": "tools/key results.js#updateKeyResult"
    },
    "delete_key_result": {
      "category": "key results",
      "operation": "DELETE /key-results/{id}",
      "description": "Delete a key result",
      "requiredParams": ["id"],
      "optionalParams": ["instance", "workspaceId", "includeRaw"],
      "implementation": "tools/key results.js#deleteKeyResult"
    },
    "get_initiatives": {
      "category": "initiatives",
      "operation": "GET /initiatives",
      "description": "List all initiatives",
      "requiredParams": [],
      "optionalParams": ["instance", "workspaceId", "includeRaw"],
      "implementation": "tools/initiatives.js#getInitiatives"
    },
    "create_initiative": {
      "category": "initiatives",
      "operation": "POST /initiatives",
      "description": "Create a new initiative",
      "requiredParams": ["name"],
      "optionalParams": [
        "description",
        "ownerEmail",
        "timeframe",
        "instance",
        "workspaceId",
        "includeRaw"
      ],
      "implementation": "tools/initiatives.js#createInitiative"
    },
    "get_initiative": {
      "category": "initiatives",
      "operation": "GET /initiatives/{id}",
      "description": "Get a specific initiative",
      "requiredParams": ["id"],
      "optionalParams": ["instance", "workspaceId", "includeRaw"],
      "implementation": "tools/initiatives.js#getInitiative"
    },
    "update_initiative": {
      "category": "initiatives",
      "operation": "PATCH /initiatives/{id}",
      "description": "Update an existing initiative",
      "requiredParams": ["id", "name"],
      "optionalParams": [
        "description",
        "ownerEmail",
        "timeframe",
        "instance",
        "workspaceId",
        "includeRaw"
      ],
      "implementation": "tools/initiatives.js#updateInitiative"
    },
    "delete_initiative": {
      "category": "initiatives",
      "operation": "DELETE /initiatives/{id}",
      "description": "Delete an initiative",
      "requiredParams": ["id"],
      "optionalParams": ["instance", "workspaceId", "includeRaw"],
      "implementation": "tools/initiatives.js#deleteInitiative"
    },
    "list_links_initiative_to_objectives": {
      "category": "initiatives",
      "operation": "GET /initiatives/{id}/links/objectives",
      "description": "List objectives linked to a specific initiative",
      "requiredParams": ["id"],
      "optionalParams": ["instance", "workspaceId", "includeRaw"],
      "implementation": "tools/initiatives.js#listLinksInitiativeToObjectives"
    },
    "list_links_initiative_to_features": {
      "category": "initiatives",
      "operation": "GET /initiatives/{id}/links/features",
      "description": "List features linked to a specific initiative",
      "requiredParams": ["id"],
      "optionalParams": ["instance", "workspaceId", "includeRaw"],
      "implementation": "tools/initiatives.js#listLinksInitiativeToFeatures"
    },
    "create_initiative_to_objective_link": {
      "category": "initiatives",
      "operation": "POST /initiatives/{id}/links/objectives/{objectiveId}",
      "description": "Create a new link between an initiative and an objective",
      "requiredParams": ["id", "objectiveId"],
      "optionalParams": ["instance", "workspaceId", "includeRaw"],
      "implementation": "tools/initiatives.js#createInitiativeToObjectiveLink"
    },
    "delete_initiative_to_objective_link": {
      "category": "initiatives",
      "operation": "DELETE /initiatives/{id}/links/objectives/{objectiveId}",
      "description": "Delete a link between an initiative and an objective",
      "requiredParams": ["id", "objectiveId"],
      "optionalParams": ["instance", "workspaceId", "includeRaw"],
      "implementation": "tools/initiatives.js#deleteInitiativeToObjectiveLink"
    },
    "create_initiative_to_feature_link": {
      "category": "initiatives",
      "operation": "POST /initiatives/{id}/links/features/{featureId}",
      "description": "Create a new link between an initiative and a feature",
      "requiredParams": ["id", "featureId"],
      "optionalParams": ["instance", "workspaceId", "includeRaw"],
      "implementation": "tools/initiatives.js#createInitiativeToFeatureLink"
    },
    "delete_initiative_to_feature_link": {
      "category": "initiatives",
      "operation": "DELETE /initiatives/{id}/links/features/{featureId}",
      "description": "Delete a link between an initiative and a feature",
      "requiredParams": ["id", "featureId"],
      "optionalParams": ["instance", "workspaceId", "includeRaw"],
      "implementation": "tools/initiatives.js#deleteInitiativeToFeatureLink"
    },
    "post_plugin_integration": {
      "category": "plugin integrations",
      "operation": "POST /plugin-integrations",
      "description": "Create a plugin integration",
      "requiredParams": ["body"],
      "optionalParams": ["instance", "workspaceId", "includeRaw"],
      "implementation": "tools/plugin integrations.js#postPluginIntegration"
    },
    "get_plugin_integrations": {
      "category": "plugin integrations",
      "operation": "GET /plugin-integrations",
      "description": "List all plugin integrations",
      "requiredParams": [],
      "optionalParams": ["instance", "workspaceId", "includeRaw"],
      "implementation": "tools/plugin integrations.js#getPluginIntegrations"
    },
    "get_plugin_integration": {
      "category": "plugin integrations",
      "operation": "GET /plugin-integrations/{id}",
      "description": "Retrieve a plugin integration",
      "requiredParams": ["id"],
      "optionalParams": ["instance", "workspaceId", "includeRaw"],
      "implementation": "tools/plugin integrations.js#getPluginIntegration"
    },
    "patch_plugin_integration": {
      "category": "plugin integrations",
      "operation": "PATCH /plugin-integrations/{id}",
      "description": "Update a plugin integration",
      "requiredParams": ["id", "body"],
      "optionalParams": ["instance", "workspaceId", "includeRaw"],
      "implementation": "tools/plugin integrations.js#patchPluginIntegration"
    },
    "put_plugin_integration": {
      "category": "plugin integrations",
      "operation": "PUT /plugin-integrations/{id}",
      "description": "Update a plugin integration",
      "requiredParams": ["id", "body"],
      "optionalParams": ["instance", "workspaceId", "includeRaw"],
      "implementation": "tools/plugin integrations.js#putPluginIntegration"
    },
    "delete_plugin_integration": {
      "category": "plugin integrations",
      "operation": "DELETE /plugin-integrations/{id}",
      "description": "Delete a plugin integration",
      "requiredParams": ["id"],
      "optionalParams": ["instance", "workspaceId", "includeRaw"],
      "implementation": "tools/plugin integrations.js#deletePluginIntegration"
    },
    "get_plugin_integration_connections": {
      "category": "plugin integrations",
      "operation": "GET /plugin-integrations/{id}/connections",
      "description": "List all plugin integration connections",
      "requiredParams": ["id"],
      "optionalParams": ["instance", "workspaceId", "includeRaw"],
      "implementation": "tools/plugin integrations.js#getPluginIntegrationConnections"
    },
    "get_plugin_integration_connection": {
      "category": "plugin integrations",
      "operation": "GET /plugin-integrations/{id}/connections/{featureId}",
      "description": "Retrieve a plugin integration connection",
      "requiredParams": ["id", "featureId"],
      "optionalParams": ["instance", "workspaceId", "includeRaw"],
      "implementation": "tools/plugin integrations.js#getPluginIntegrationConnection"
    },
    "put_plugin_integration_connection": {
      "category": "plugin integrations",
      "operation": "PUT /plugin-integrations/{id}/connections/{featureId}",
      "description": "Set a plugin integration connection",
      "requiredParams": ["id", "featureId", "body"],
      "optionalParams": ["instance", "workspaceId", "includeRaw"],
      "implementation": "tools/plugin integrations.js#putPluginIntegrationConnection"
    },
    "delete_plugin_integration_connection": {
      "category": "plugin integrations",
      "operation": "DELETE /plugin-integrations/{id}/connections/{featureId}",
      "description": "Delete a plugin integration connection",
      "requiredParams": ["id", "featureId"],
      "optionalParams": ["instance", "workspaceId", "includeRaw"],
      "implementation": "tools/plugin integrations.js#deletePluginIntegrationConnection"
    },
    "get_jira_integration": {
      "category": "jira integrations",
      "operation": "GET /jira-integrations/{id}",
      "description": "Retrieve a Jira integration",
      "requiredParams": ["id"],
      "optionalParams": ["instance", "workspaceId", "includeRaw"],
      "implementation": "tools/jira integrations.js#getJiraIntegration"
    },
    "get_jira_integrations": {
      "category": "jira integrations",
      "operation": "GET /jira-integrations",
      "description": "List all Jira integrations",
      "requiredParams": [],
      "optionalParams": ["instance", "workspaceId", "includeRaw"],
      "implementation": "tools/jira integrations.js#getJiraIntegrations"
    },
    "get_jira_integration_connection": {
      "category": "jira integrations",
      "operation": "GET /jira-integrations/{id}/connections/{featureId}",
      "description": "Retrieve a Jira integration connection",
      "requiredParams": ["id", "featureId"],
      "optionalParams": ["instance", "workspaceId", "includeRaw"],
      "implementation": "tools/jira integrations.js#getJiraIntegrationConnection"
    },
    "get_jira_integration_connections": {
      "category": "jira integrations",
      "operation": "GET /jira-integrations/{id}/connections",
      "description": "List all Jira integration connections",
      "requiredParams": ["id"],
      "optionalParams": [
        "connection.issueKey",
        "connection.issueId",
        "instance",
        "workspaceId",
        "includeRaw"
      ],
      "implementation": "tools/jira integrations.js#getJiraIntegrationConnections"
    },
    "post_webhook": {
      "category": "webhooks",
      "operation": "POST /webhooks",
      "description": "Create a new subscription",
      "requiredParams": ["body"],
      "optionalParams": ["instance", "workspaceId", "includeRaw"],
      "implementation": "tools/webhooks.js#postWebhook"
    },
    "get_webhooks": {
      "category": "webhooks",
      "operation": "GET /webhooks",
      "description": "List all subscriptions",
      "requiredParams": [],
      "optionalParams": ["instance", "workspaceId", "includeRaw"],
      "implementation": "tools/webhooks.js#getWebhooks"
    },
    "get_webhook": {
      "category": "webhooks",
      "operation": "GET /webhooks/{id}",
      "description": "Retrieve a subscription",
      "requiredParams": ["id"],
      "optionalParams": ["instance", "workspaceId", "includeRaw"],
      "implementation": "tools/webhooks.js#getWebhook"
    },
    "delete_webhook": {
      "category": "webhooks",
      "operation": "DELETE /webhooks/{id}",
      "description": "Delete a subscription",
      "requiredParams": ["id"],
      "optionalParams": ["instance", "workspaceId", "includeRaw"],
      "implementation": "tools/webhooks.js#deleteWebhook"
    }
  }
}
